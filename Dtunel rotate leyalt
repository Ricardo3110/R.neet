[
    {
        "label": "Nome do app",
        "name": "APP_NAME",
        "value": "DTunnel Mod",
        "type": "STRING"
    },
    {
        "label": "Logo do app",
        "name": "APP_LOGO",
        "value": null,
        "type": "IMAGE"
    },
    {
        "label": "Imagem de fundo",
        "name": "APP_BACKGROUND_IMAGE",
        "value": null,
        "type": "IMAGE"
    },
    {
        "label": "Tipo do fundo do app",
        "name": "APP_BACKGROUND_TYPE",
        "value": {
            "options": [
                {
                    "label": "Imagem",
                    "value": "IMAGE"
                },
                {
                    "label": "Cor",
                    "value": "COLOR"
                }
            ],
            "selected": "COLOR"
        },
        "type": "SELECT"
    },
    {
        "label": "Cor de fundo",
        "name": "APP_BACKGROUND_COLOR",
        "value": "#080e16c7",
        "type": "COLOR"
    },
    {
        "label": "Cor do card inicial",
        "name": "APP_CARD_COLOR",
        "value": "#1d242e73",
        "type": "COLOR"
    },
    {
        "label": "Raio do card inicial",
        "name": "APP_CARD_RADIUS",
        "value": 20,
        "type": "INTEGER"
    },
    {
        "label": "Cor do card de status",
        "name": "APP_CARD_STATUS_COLOR",
        "value": "#1d242e73",
        "type": "COLOR"
    },
    {
        "label": "Raio do card de status",
        "name": "APP_CARD_STATUS_RADIUS",
        "value": 25,
        "type": "INTEGER"
    },
    {
        "label": "Cor do card de configurações",
        "name": "APP_CARD_CONFIG_COLOR",
        "value": "#0E171EC9",
        "type": "COLOR"
    },
    {
        "label": "Cor do fundo dos dialogs",
        "name": "APP_DIALOG_BACKGROUND_COLOR",
        "value": "#050C5AE4",
        "type": "COLOR"
    },
    {
        "label": "Cor do fundo do dialog de log",
        "name": "APP_DIALOG_LOGGER_COLOR",
        "value": "#080e16c7",
        "type": "COLOR"
    },
    {
        "label": "Cor das bordas",
        "name": "APP_BORDER_COLOR",
        "value": "#1d242e73",
        "type": "COLOR"
    },
    {
        "label": "Cor dos inputs",
        "name": "APP_INPUT_COLOR",
        "value": "#1d242e73",
        "type": "COLOR"
    },
    {
        "label": "Raio dos inputs",
        "name": "APP_INPUT_RADIUS",
        "value": 25,
        "type": "INTEGER"
    },
    {
        "label": "Cor dos textos",
        "name": "APP_TEXT_COLOR",
        "value": "#FFFFFFFF",
        "type": "COLOR"
    },
    {
        "label": "Cor dos botões",
        "name": "APP_BUTTON_COLOR",
        "value": "#1d242e73",
        "type": "COLOR"
    },
    {
        "label": "Raio dos botões",
        "name": "APP_BUTTON_RADIUS",
        "value": 25,
        "type": "INTEGER"
    },
    {
        "label": "Cor dos icones",
        "name": "APP_ICON_COLOR",
        "value": "#FFFFFFFF",
        "type": "COLOR"
    },
    {
        "label": "Exibir modo de conexão",
        "name": "APP_SHOW_CONNECTION_MODE",
        "value": true,
        "type": "BOOLEAN"
    },
    {
        "label": "Atualizar automaticamente as configurações ao lançar uma atualização.",
        "name": "APP_CONFIG_AUTO_UPDATE",
        "value": false,
        "type": "BOOLEAN"
    },
    {
        "label": "Iniciar o app automaticamente ao reiniciar o dispositivo",
        "name": "APP_AUTO_START",
        "value": false,
        "type": "BOOLEAN"
    },
    {
        "label": "Usar limiter de conexão",
        "name": "APP_CONNECTION_LIMITER",
        "value": false,
        "type": "BOOLEAN"
    },
    {
        "label": "Usar botão de atualizações",
        "name": "APP_BTN_UPDATE_ENABLED",
        "value": true,
        "type": "BOOLEAN"
    },
    {
        "label": "Usar botão de registros",
        "name": "APP_BTN_LOGGER_ENABLED",
        "value": true,
        "type": "BOOLEAN"
    },
    {
        "label": "Usar botão de pagina webview",
        "name": "APP_BTN_PAGE_ENABLED",
        "value": true,
        "type": "BOOLEAN"
    },
    {
        "label": "Ativar dialog de erros",
        "name": "APP_DIALOG_ERROR_ENABLED",
        "value": true,
        "type": "BOOLEAN"
    },
    {
        "label": "Ativar dialog de checkuser",
        "name": "APP_CHECKUSER_DIALOG_ENABLED",
        "value": true,
        "type": "BOOLEAN"
    },
    {
        "label": "Ativar toast de sucesso",
        "name": "APP_SUCCESS_TOAST_ENABLED",
        "value": true,
        "type": "BOOLEAN"
    },
    {
        "label": "Ativar toast de erro",
        "name": "APP_ERROR_TOAST_ENABLED",
        "value": true,
        "type": "BOOLEAN"
    },
    {
        "label": "Usar layout webview",
        "name": "APP_LAYOUT_WEBVIEW_ENABLED",
        "value": true,
        "type": "BOOLEAN"
    },
    {
        "label": "Mensagem",
        "name": "APP_MESSAGE",
        "value": null,
        "type": "TEXT"
    },
    {
        "label": "Tipo de mensagem",
        "name": "APP_MESSAGE_TYPE",
        "value": {
            "options": [
                {
                    "label": "Alerta",
                    "value": "ALERT"
                },
                {
                    "label": "Informação",
                    "value": "INFO"
                },
                {
                    "label": "Boas vindas",
                    "value": "WELCOME"
                },
                {
                    "label": "Sem mensagem",
                    "value": "NONE"
                }
            ],
            "selected": "NONE"
        },
        "type": "SELECT"
    },
    {
        "label": "URL de atualização do aplicativo",
        "name": "APP_UPDATE_URL",
        "value": null,
        "type": "URL"
    },
    {
        "label": "LAYOUT WEBVIEW (POR SUA CONTA E RISCO)",
        "name": "APP_LAYOUT_WEBVIEW",
        "value": "<!DOCTYPE html>\n<html lang=\"pt-BR\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>MOD</title>\n    <script src=\"https://cdn.tailwindcss.com\"></script>\n    <script src=\"https://kit.fontawesome.com/a076d05399.js\" crossorigin=\"anonymous\"></script>\n    <style>\n        body {\n            font-family: 'Inter', sans-serif;\n            color: #e0e7ff;\n            min-height: 100vh;\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n            justify-content: flex-start;\n            padding: 1.5rem;\n            overflow-x: hidden;\n            --background-image-url: url('https://i.ibb.co/d4XvZX03/69bb05c4-79d3-4df1-8f7c-0ee5344d501a.jpg');\n            --solid-background-color: #0d0f1a;\n            background-image: linear-gradient(to bottom, rgba(13, 15, 26, 0.95), rgba(13, 15, 26, 0.95)), var(--background-image-url);\n            background-size: cover;\n            background-position: center;\n            background-attachment: fixed;\n            transition: background-image 0.5s ease-in-out, background-color 0.5s ease-in-out;\n        }\n        .push-effect:active {\n            transform: scale(0.95);\n            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.5);\n            transition: transform 0.1s ease, box-shadow 0.1s ease;\n        }\n        @keyframes power-glow {\n            0%, 100% { filter: drop-shadow(0 0 5px #fff) drop-shadow(0 0 8px #7d2ae8) drop-shadow(0 0 12px #4d1587); }\n            50% { filter: drop-shadow(0 0 8px #fff) drop-shadow(0 0 12px #7d2ae8) drop-shadow(0 0 15px #4d1587); }\n        }\n        @keyframes border-blink {\n            0%, 100% { box-shadow: 0 0 5px #7d2ae8, 0 0 8px #7d2ae8, 0 0 12px #7d2ae8; }\n            50% { box-shadow: 0 0 8px #7d2ae8, 0 0 12px #7d2ae8, 0 0 15px #7d2ae8; }\n        }\n        .connect-button-wrapper {\n            position: relative;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            width: clamp(120px, 45vw, 180px);\n            height: clamp(120px, 45vw, 180px);\n            border-radius: 50%;\n            cursor: pointer;\n            transition: all 0.3s ease-in-out;\n        }\n        .connect-button-wrapper.disconnected {\n            background-color: #1e293b;\n        }\n        .connect-button-wrapper.connected {\n            background: radial-gradient(circle, #7d2ae8, #4d1587);\n            animation: border-blink 1.5s infinite;\n        }\n        .connect-button-wrapper .power-icon {\n            color: #d1d5db;\n            width: clamp(60px, 20vw, 90px);\n            height: clamp(60px, 20vw, 90px);\n        }\n        .connect-button-wrapper.connected .power-icon {\n            animation: power-glow 1.5s infinite;\n        }\n        @keyframes modal-fade-in {\n            from { opacity: 0; }\n            to { opacity: 1; }\n        }\n        @keyframes modal-slide-up {\n            from { transform: translateY(100%); }\n            to { transform: translateY(0); }\n        }\n        .modal-container {\n            position: fixed;\n            top: 0;\n            left: 0;\n            width: 100%;\n            height: 100%;\n            background-color: rgba(0, 0, 0, 0.75);\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            z-index: 50;\n            animation: modal-fade-in 0.3s forwards;\n        }\n        .modal-content {\n            background: #1f2937;\n            padding: clamp(0.75rem, 3vw, 1rem);\n            border-radius: 0.75rem;\n            width: clamp(280px, 85vw, 360px);\n            box-shadow: 0 8px 20px rgba(0, 0, 0, 0.5);\n            border: 1px solid #374151;\n            animation: modal-slide-up 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275);\n            max-height: 85vh;\n            overflow-y: auto;\n        }\n        .logo-placeholder {\n            width: clamp(60px, 18vw, 80px);\n            height: clamp(60px, 18vw, 80px);\n            background: linear-gradient(45deg, #7d2ae8, #4d1587);\n            border-radius: 50%;\n            box-shadow: 0 0 8px #7d2ae8, 0 0 15px #4d1587;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            margin: 0 auto 0.75rem;\n            position: relative;\n            cursor: pointer;\n        }\n        .logo-placeholder img, .logo-placeholder svg {\n            width: 100%;\n            height: 100%;\n            object-fit: cover;\n            border-radius: 50%;\n        }\n        .logo-placeholder .pencil-icon {\n            position: absolute;\n            bottom: -4px;\n            right: -4px;\n            width: clamp(20px, 6vw, 24px);\n            height: clamp(20px, 6vw, 24px);\n            background-color: #2d3748;\n            border: 2px solid #1f2937;\n            border-radius: 50%;\n            padding: 4px;\n            color: #e0e7ff;\n            opacity: 0.9;\n        }\n        .server-modal-item {\n            display: flex;\n            align-items: center;\n            justify-content: space-between;\n            padding: 0.75rem;\n            background-color: #2d3748;\n            border-radius: 0.5rem;\n            cursor: pointer;\n            transition: background-color 0.2s;\n        }\n        .server-modal-item:hover {\n            background-color: #4a5568;\n        }\n        .server-modal-item.selected {\n            background-color: #4c1d95;\n            border: 2px solid #a78bfa;\n        }\n        .modal-item-title {\n            display: flex;\n            align-items: center;\n        }\n        .modal-item-title img {\n            width: clamp(20px, 5vw, 24px);\n            height: clamp(20px, 5vw, 24px);\n            border-radius: 50%;\n            margin-right: 0.75rem;\n        }\n        .logs-container {\n            background-color: #111827;\n            border: 1px solid #374151;\n            border-radius: 0.5rem;\n            padding: 0.75rem;\n            max-height: 60vh;\n            overflow-y: auto;\n            font-size: clamp(0.65rem, 2.5vw, 0.8rem);\n            line-height: 1.5;\n            word-wrap: break-word;\n            scrollbar-width: thin;\n            scrollbar-color: #374151 #111827;\n        }\n        .logs-container::-webkit-scrollbar {\n            width: 6px;\n        }\n        .logs-container::-webkit-scrollbar-track {\n            background: #111827;\n        }\n        .logs-container::-webkit-scrollbar-thumb {\n            background-color: #374151;\n            border-radius: 4px;\n        }\n        .log-entry {\n            padding: 0.5rem;\n            border: 1px solid #374151;\n            border-radius: 0.25rem;\n            background-color: #1f2937;\n            margin-bottom: 0.5rem;\n        }\n        .log-entry:last-child {\n            margin-bottom: 0;\n        }\n        .log-error {\n            color: #ef4444;\n            text-align: center;\n        }\n        .log-success {\n            color: #10b981;\n            text-align: center;\n        }\n        .loading-spinner {\n            border: 2px solid #e0e7ff;\n            border-top: 2px solid #7d2ae8;\n            border-radius: 50%;\n            width: clamp(16px, 4vw, 20px);\n            height: clamp(16px, 4vw, 20px);\n            animation: spin 1s linear infinite;\n            margin: 0 auto;\n        }\n        @keyframes spin {\n            0% { transform: rotate(0deg); }\n            100% { transform: rotate(360deg); }\n        }\n        .main-title {\n            font-size: clamp(1.25rem, 5vw, 1.75rem);\n            font-weight: bold;\n            color: #ffffff;\n            text-align: center;\n            margin-bottom: 0.75rem;\n        }\n        .text-success { color: #10b981; }\n        .text-warning { color: #f59e0b; }\n        .text-danger { color: #ef4444; }\n        .server-actions {\n            display: flex;\n            align-items: center;\n            gap: 8px;\n        }\n        .server-action-icon {\n            color: #b0b0b0;\n            cursor: pointer;\n            transition: color 0.2s ease, transform 0.2s ease;\n            width: clamp(18px, 5vw, 22px);\n            height: clamp(18px, 5vw, 22px);\n        }\n        .server-action-icon:hover {\n            color: #a044ff;\n            transform: scale(1.1);\n        }\n        .server-action-icon::after {\n            content: \"Auto Conexão\";\n            position: absolute;\n            top: -28px;\n            left: 50%;\n            transform: translateX(-50%);\n            background: rgba(10, 10, 16, 0.95);\n            color: #e0e0e0;\n            padding: 4px 8px;\n            border-radius: 4px;\n            font-size: clamp(10px, 2.5vw, 11px);\n            white-space: nowrap;\n            opacity: 0;\n            visibility: hidden;\n            transition: opacity 0.2s ease, visibility 0.2s ease;\n            pointer-events: none;\n            border: 1px solid rgba(255, 255, 255, 0.1);\n        }\n        .server-action-icon:hover::after {\n            opacity: 1;\n            visibility: visible;\n        }\n        .category-chip {\n            padding: 4px 8px;\n            background-color: #2d3748;\n            border-radius: 16px;\n            cursor: pointer;\n            transition: background-color 0.2s;\n            font-size: clamp(11px, 3vw, 13px);\n        }\n        .category-chip.active {\n            background-color: #4c1d95;\n        }\n        .category-chip:hover {\n            background-color: #4a5568;\n        }\n        .credentials-saved {\n            color: #10b981;\n            font-size: clamp(0.65rem, 2.5vw, 0.75rem);\n            text-align: center;\n            margin-top: 0.5rem;\n        }\n        .input-group {\n            position: relative;\n        }\n        .password-toggle {\n            position: absolute;\n            right: 10px;\n            top: 50%;\n            transform: translateY(-50%);\n            cursor: pointer;\n            color: #b0b0b0;\n        }\n        .password-toggle:hover {\n            color: #a044ff;\n        }\n        @media (max-width: 768px) {\n            body {\n                padding: 1rem;\n            }\n            .modal-content {\n                padding: clamp(0.5rem, 2.5vw, 0.75rem);\n                width: clamp(260px, 90vw, 340px);\n            }\n            .connect-button-wrapper {\n                width: clamp(100px, 40vw, 160px);\n                height: clamp(100px, 40vw, 160px);\n            }\n            .connect-button-wrapper .power-icon {\n                width: clamp(50px, 18vw, 80px);\n                height: clamp(50px, 18vw, 80px);\n            }\n            .main-title {\n                font-size: clamp(1rem, 4.5vw, 1.5rem);\n            }\n            .server-modal-item {\n                padding: 0.5rem;\n            }\n            .modal-item-title img {\n                width: clamp(18px, 4.5vw, 20px);\n                height: clamp(18px, 4.5vw, 20px);\n            }\n            .server-action-icon {\n                width: clamp(16px, 4.5vw, 20px);\n                height: clamp(16px, 4.5vw, 20px);\n            }\n        }\n        @media (max-width: 480px) {\n            body {\n                padding: 0.75rem;\n            }\n            .modal-content {\n                width: clamp(240px, 95vw, 300px);\n                padding: 0.5rem;\n            }\n            .connect-button-wrapper {\n                width: clamp(80px, 35vw, 140px);\n                height: clamp(80px, 35vw, 140px);\n            }\n            .connect-button-wrapper .power-icon {\n                width: clamp(40px, 16vw, 70px);\n                height: clamp(40px, 16vw, 70px);\n            }\n            .main-title {\n                font-size: clamp(0.9rem, 4vw, 1.25rem);\n            }\n            .server-modal-item {\n                padding: 0.4rem;\n            }\n            .modal-item-title img {\n                width: clamp(16px, 4vw, 18px);\n                height: clamp(16px, 4vw, 18px);\n            }\n            .server-action-icon {\n                width: clamp(14px, 4vw, 18px);\n                height: clamp(14px, 4vw, 18px);\n            }\n        }\n    </style>\n</head>\n<body class=\"min-h-screen flex flex-col items-center\">\n    <div class=\"w-full max-w-md mx-auto relative z-20 flex-grow flex flex-col justify-center items-center\">\n        <header class=\"text-center py-4 relative\">\n            <h1 class=\"main-title\">D SPEED</h1>\n            <p id=\"status-text\" class=\"mt-1 text-sm opacity-70\">Pressione para conectar</p>\n            <div class=\"mt-4 flex justify-center\">\n                <div class=\"connect-button-wrapper disconnected\" id=\"connectButton\">\n                    <svg class=\"power-icon\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n                        <path d=\"M18.36 6.64a9 9 0 1 1-12.73 0\"></path>\n                        <line x1=\"12\" y1=\"2\" x2=\"12\" y2=\"12\"></line>\n                    </svg>\n                </div>\n            </div>\n        </header>\n        <main class=\"mt-4 space-y-3 px-2 w-full\">\n            <p class=\"text-center text-sm font-semibold text-gray-400\">Status: <span id=\"status-span\" class=\"font-bold text-red-500\">DESCONECTADO</span></p>\n            <div class=\"text-center text-xs mt-2 space-y-1\">\n                <p id=\"ip-address\" class=\"text-gray-400\">IP LOCAL: <span class=\"text-white\">192.168.1.1</span></p>\n                <p id=\"ping-status\" class=\"text-gray-400\">Ping: <span class=\"text-white\">-- ms</span></p>\n            </div>\n            <button id=\"server-select-btn\" class=\"w-full bg-gray-900 rounded-xl shadow-lg p-3 flex items-center justify-between push-effect cursor-pointer border border-gray-700\">\n                <div class=\"flex items-center space-x-2\">\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-8 w-8 text-purple-500\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n                        <path d=\"M5 17L19 7\"></path>\n                        <path d=\"M17 11V7H13\"></path>\n                        <rect x=\"3\" y=\"1\" width=\"18\" height=\"12\" rx=\"2\" ry=\"2\"></rect>\n                        <line x1=\"12\" y1=\"13\" x2=\"12\" y2=\"23\"></line>\n                        <line x1=\"8\" y1=\"23\" x2=\"16\" y2=\"23\"></line>\n                        <line x1=\"12\" y1=\"17\" x2=\"12\" y2=\"20\"></line>\n                    </svg>\n                    <div>\n                        <p id=\"selected-server-name\" class=\"font-semibold text-base text-white\">Selecionar Servidor</p>\n                        <p id=\"selected-server-desc\" class=\"text-xs text-gray-400\">Toque para escolher um servidor</p>\n                    </div>\n                </div>\n                <div class=\"server-actions\">\n                    <svg id=\"auto-connect-icon\" class=\"server-action-icon\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M13 10V3L4 14h7v7l9-11h-7z\" />\n                    </svg>\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-5 w-5 text-gray-500\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M19 9l-7 7-7-7\" />\n                    </svg>\n                </div>\n            </button>\n        </main>\n        <footer class=\"mt-6 grid grid-cols-1 sm:grid-cols-2 gap-2 px-2 w-full max-w-md\">\n            <button id=\"menu-btn\" class=\"bg-gray-800 text-white rounded-xl shadow-lg p-3 flex flex-col items-center justify-center space-y-1 push-effect transition-transform duration-200 border border-gray-700\">\n                <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-7 w-7 text-purple-500\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" stroke-width=\"2\">\n                    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M4 6h16M4 12h16M4 18h16\" />\n                </svg>\n                <p class=\"font-bold text-sm\">MENU</p>\n                <p class=\"text-xs text-gray-400 opacity-80\">Acessar opções</p>\n            </button>\n            <button id=\"login-btn\" class=\"bg-gray-800 text-white rounded-xl shadow-lg p-3 flex flex-col items-center justify-center space-y-1 push-effect transition-transform duration-200 border border-gray-700\">\n                <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-7 w-7 text-purple-500\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" stroke-width=\"2\">\n                    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M17.5 8.5L20 11m0 0l-2.5 2.5M20 11H4\" />\n                </svg>\n                <p class=\"font-bold text-sm\">Login</p>\n                <p class=\"text-xs text-gray-400 opacity-80\">Insira seu acesso de login</p>\n            </button>\n        </footer>\n    </div>\n    <div id=\"menu-modal\" class=\"modal-container hidden\">\n        <div class=\"modal-content\">\n            <h3 class=\"text-lg font-bold mb-3 text-white text-center\">MENU</h3>\n            <div id=\"logo-placeholder-btn\" class=\"logo-placeholder\">\n                <img id=\"logo-image\" src=\"https://i.ibb.co/d4XvZX03/69bb05c4-79d3-4df1-8f7c-0ee5344d501a.jpg\" alt=\"Logo\">\n                <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"pencil-icon\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" stroke-width=\"2\">\n                    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z\" />\n                </svg>\n            </div>\n            <input type=\"file\" id=\"logo-upload\" class=\"hidden\" accept=\"image/*\">\n            <div class=\"text-center mb-3\">\n                <p class=\"text-sm font-semibold text-gray-400\">ID:</p>\n                <p id=\"user-id\" class=\"font-bold text-base text-white tracking-widest mt-1\">XXXXXXXXXXXX</p>\n            </div>\n            <div class=\"space-y-2\">\n                <button id=\"logs-btn\" class=\"w-full bg-gray-700 hover:bg-gray-600 text-white py-2 px-3 rounded-lg font-semibold push-effect\">Registro & Logs</button>\n                <button id=\"router-btn\" class=\"w-full bg-gray-700 hover:bg-gray-600 text-white py-2 px-3 rounded-lg font-semibold push-effect\">Roteador</button>\n                <button id=\"buy-login-btn\" class=\"w-full bg-gray-700 hover:bg-gray-600 text-white py-2 px-3 rounded-lg font-semibold push-effect\">Comprar login</button>\n                <button id=\"clear-data-btn\" class=\"w-full bg-gray-700 hover:bg-gray-600 text-white py-2 px-3 rounded-lg font-semibold push-effect\">Limpar Dados</button>\n                <button id=\"toggle-bg-btn\" class=\"w-full bg-gray-700 hover:bg-gray-600 text-white py-2 px-3 rounded-lg font-semibold push-effect\">Alterna pra cor</button>\n                <button id=\"change-color-btn\" class=\"w-full bg-gray-700 hover:bg-gray-600 text-white py-2 px-3 rounded-lg font-semibold push-effect\">Alterar cor</button>\n            </div>\n            <button id=\"close-menu-btn\" class=\"mt-3 w-full bg-purple-700 text-white py-2 px-4 rounded-lg font-semibold hover:bg-purple-800 transition-colors\">Fechar</button>\n        </div>\n    </div>\n    <div id=\"credentials-modal\" class=\"modal-container hidden\">\n        <div class=\"modal-content text-center\">\n            <h3 class=\"text-lg font-bold mb-3 text-white\">Credenciais</h3>\n            <div class=\"space-y-2\">\n                <div class=\"input-group\" id=\"username-group\">\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"absolute left-3 top-1/2 -translate-y-1/2 h-5 w-5 text-gray-400\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" stroke-width=\"2\">\n                        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z\" />\n                    </svg>\n                    <input type=\"text\" id=\"username-input\" placeholder=\"Usuário\" class=\"w-full bg-gray-900 border border-gray-700 text-white rounded-lg pl-10 pr-3 py-2 text-sm focus:ring-2 focus:ring-purple-500 focus:outline-none\">\n                </div>\n                <div class=\"input-group\" id=\"password-group\">\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"absolute left-3 top-1/2 -translate-y-1/2 h-5 w-5 text-gray-400\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" stroke-width=\"2\">\n                        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M15 7a2 2 0 012 2v5a2 2 0 01-2 2H9a2 2 0 01-2-2V9a2 2 0 012-2h6z\" />\n                        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M5 9h14\" />\n                    </svg>\n                    <input type=\"password\" id=\"password-input\" placeholder=\"Senha\" class=\"w-full bg-gray-900 border border-gray-700 text-white rounded-lg pl-10 pr-10 py-2 text-sm focus:ring-2 focus:ring-purple-500 focus:outline-none\">\n                    <i class=\"password-toggle fas fa-eye\"></i>\n                </div>\n                <div class=\"input-group\" id=\"uuid-group\" style=\"display: none;\">\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"absolute left-3 top-1/2 -translate-y-1/2 h-5 w-5 text-gray-400\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" stroke-width=\"2\">\n                        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M12 4v16m8-8H4\" />\n                    </svg>\n                    <input type=\"text\" id=\"uuid-input\" placeholder=\"UUID (V2RAY)\" class=\"w-full bg-gray-900 border border-gray-700 text-white rounded-lg pl-10 pr-3 py-2 text-sm focus:ring-2 focus:ring-purple-500 focus:outline-none\">\n                </div>\n                <p id=\"credentials-status\" class=\"credentials-saved hidden\">Credenciais salvas</p>\n            </div>\n            <button id=\"save-credentials-btn\" class=\"mt-3 w-full bg-purple-700 text-white py-2 px-4 rounded-lg font-semibold hover:bg-purple-800 transition-colors\">Salvar Credenciais</button>\n            <button id=\"close-credentials-modal-btn\" class=\"mt-2 w-full bg-gray-700 text-white py-2 px-4 rounded-lg font-semibold hover:bg-gray-600 transition-colors\">Fechar</button>\n        </div>\n    </div>\n    <div id=\"logs-modal\" class=\"modal-container hidden\">\n        <div class=\"modal-content\">\n            <h3 class=\"text-lg font-bold mb-3 text-white text-center\">Logs</h3>\n            <div id=\"logs-container\" class=\"logs-container\">\n                <p class=\"log-error\">Nenhum log disponível.</p>\n            </div>\n            <button id=\"clear-logs-btn\" class=\"w-full bg-gray-700 hover:bg-gray-600 text-white py-2 px-3 rounded-lg font-semibold push-effect mt-3\">Limpar Logs</button>\n            <button id=\"close-logs-modal-btn\" class=\"mt-2 w-full bg-purple-700 text-white py-2 px-4 rounded-lg font-semibold hover:bg-purple-800 transition-colors\">Fechar</button>\n        </div>\n    </div>\n    <div id=\"router-modal\" class=\"modal-container hidden\">\n        <div class=\"modal-content\">\n            <h3 class=\"text-lg font-bold mb-3 text-white text-center\">Roteador</h3>\n            <p id=\"router-status\" class=\"text-center text-sm font-semibold text-gray-400 mb-3\">Status: <span id=\"hotspot-status-span\" class=\"font-bold text-yellow-500\">Desconhecido</span></p>\n            <p id=\"hotspot-error\" class=\"text-center text-sm text-red-500 hidden\"></p>\n            <button id=\"toggle-router-btn\" class=\"w-full bg-purple-700 text-white py-2 px-3 rounded-lg font-semibold push-effect\">Ligar Roteador</button>\n            <button id=\"close-router-modal-btn\" class=\"mt-2 w-full bg-gray-700 text-white py-2 px-4 rounded-lg font-semibold hover:bg-gray-600 transition-colors\">Fechar</button>\n        </div>\n    </div>\n    <div id=\"server-selector-modal\" class=\"modal-container hidden\">\n        <div class=\"modal-content\">\n            <h3 class=\"text-lg font-bold mb-3 text-white text-center\">Selecionar Servidor</h3>\n            <input type=\"text\" id=\"server-search-input\" placeholder=\"Pesquisar servidor\" class=\"w-full bg-gray-900 border border-gray-700 text-white rounded-lg p-2 text-sm focus:ring-2 focus:ring-purple-500 focus:outline-none mb-3\">\n            <div id=\"server-list-container\" class=\"space-y-2\"></div>\n            <button id=\"close-server-modal-btn\" class=\"mt-3 w-full bg-purple-700 text-white py-2 px-4 rounded-lg font-semibold hover:bg-purple-800 transition-colors\">Fechar</button>\n        </div>\n    </div>\n    <div id=\"auto-connect-modal\" class=\"modal-container hidden\">\n        <div class=\"modal-content\">\n            <h3 class=\"text-lg font-bold mb-3 text-white text-center\">Auto Conexão</h3>\n            <div id=\"auto-connect-category-filter\" class=\"flex overflow-x-auto space-x-2 mb-3\"></div>\n            <p class=\"text-center text-sm\">Primeira configuração: <span id=\"first-config-name\">Nenhuma</span></p>\n            <button id=\"auto-connect-start-btn\" class=\"w-full bg-purple-700 text-white py-2 px-3 rounded-lg font-semibold push-effect mt-3\">Iniciar</button>\n            <button id=\"auto-connect-cancel-btn\" class=\"w-full bg-gray-700 text-white py-2 px-3 rounded-lg font-semibold push-effect mt-2\">Cancelar</button>\n            <button id=\"close-auto-connect-modal\" class=\"mt-2 w-full bg-gray-700 text-white py-2 px-4 rounded-lg font-semibold hover:bg-gray-600 transition-colors\">Fechar</button>\n        </div>\n    </div>\n    <div id=\"custom-alert\" class=\"modal-container hidden\">\n        <div class=\"modal-content text-center\">\n            <p id=\"alert-message\" class=\"text-base mb-3 text-white\"></p>\n            <button id=\"close-alert-btn\" class=\"w-full bg-purple-700 text-white py-2 px-4 rounded-lg font-semibold hover:bg-purple-800 transition-colors\">Fechar</button>\n        </div>\n    </div>\n    <div id=\"color-modal\" class=\"modal-container hidden\">\n        <div class=\"modal-content\">\n            <h3 class=\"text-lg font-bold mb-3 text-white text-center\">Alterar Cor</h3>\n            <input type=\"color\" id=\"color-picker\" class=\"w-full h-8 rounded-lg\">\n            <button id=\"close-color-btn\" class=\"mt-3 w-full bg-purple-700 text-white py-2 px-4 rounded-lg font-semibold hover:bg-purple-800 transition-colors\">Fechar</button>\n        </div>\n    </div>\n    <script>\nconst body = document.body;\nconst connectButton = document.getElementById('connectButton');\nconst statusText = document.getElementById('status-text');\nconst statusSpan = document.getElementById('status-span');\nconst ipAddress = document.getElementById('ip-address');\nconst pingStatus = document.getElementById('ping-status');\nconst serverSelectBtn = document.getElementById('server-select-btn');\nconst selectedServerNameEl = document.getElementById('selected-server-name');\nconst selectedServerDescEl = document.getElementById('selected-server-desc');\nconst menuBtn = document.getElementById('menu-btn');\nconst closeMenuBtn = document.getElementById('close-menu-btn');\nconst logsBtn = document.getElementById('logs-btn');\nconst closeLogsModalBtn = document.getElementById('close-logs-modal-btn');\nconst clearLogsBtn = document.getElementById('clear-logs-btn');\nconst routerBtn = document.getElementById('router-btn');\nconst toggleRouterBtn = document.getElementById('toggle-router-btn');\nconst closeRouterModalBtn = document.getElementById('close-router-modal-btn');\nconst hotspotStatusSpan = document.getElementById('hotspot-status-span');\nconst hotspotErrorEl = document.getElementById('hotspot-error');\nconst serverSearchInput = document.getElementById('server-search-input');\nconst serverListContainer = document.getElementById('server-list-container');\nconst closeServerModalBtn = document.getElementById('close-server-modal-btn');\nconst loginBtn = document.getElementById('login-btn');\nconst usernameInput = document.getElementById('username-input');\nconst passwordInput = document.getElementById('password-input');\nconst uuidInput = document.getElementById('uuid-input');\nconst saveCredentialsBtn = document.getElementById('save-credentials-btn');\nconst closeCredentialsModalBtn = document.getElementById('close-credentials-modal-btn');\nconst logsContainerEl = document.getElementById('logs-container');\nconst closeAlertBtn = document.getElementById('close-alert-btn');\nconst clearDataBtn = document.getElementById('clear-data-btn');\nconst toggleBgBtn = document.getElementById('toggle-bg-btn');\nconst changeColorBtn = document.getElementById('change-color-btn');\nconst colorPicker = document.getElementById('color-picker');\nconst closeColorBtn = document.getElementById('close-color-btn');\nconst logoPlaceholderBtn = document.getElementById('logo-placeholder-btn');\nconst logoImage = document.getElementById('logo-image');\nconst logoUpload = document.getElementById('logo-upload');\nconst buyLoginBtn = document.getElementById('buy-login-btn');\nconst autoConnectCategoryFilter = document.getElementById('auto-connect-category-filter');\nconst firstConfigNameEl = document.getElementById('first-config-name');\nconst autoConnectStartBtn = document.getElementById('auto-connect-start-btn');\nconst autoConnectCancelBtn = document.getElementById('auto-connect-cancel-btn');\nconst closeAutoConnectModalBtn = document.getElementById('close-auto-connect-modal');\nconst userIdEl = document.getElementById('user-id');\nlet pingInterval = null;\nlet isAutoConnecting = false;\nlet currentAutoIndex = 0;\nlet filteredAutoConnectConfigs = [];\nlet allConfigs = [];\n\nfunction openModal(modalId) {\n    document.getElementById(modalId).classList.remove('hidden');\n}\n\nfunction closeModal(modalId) {\n    document.getElementById(modalId).classList.add('hidden');\n}\n\nfunction showCustomAlert(message) {\n    document.getElementById('alert-message').textContent = message;\n    openModal('custom-alert');\n}\n\nfunction updateConnectionStatus() {\n    try {\n        const state = window?.DtGetVpnState?.execute()?.toUpperCase() ?? 'DISCONNECTED';\n        console.log(\"Atualizando status da conexão:\", state);\n        if (state === 'CONNECTED') {\n            connectButton.classList.remove('disconnected');\n            connectButton.classList.add('connected');\n            statusText.textContent = 'Pressione para desconectar';\n            statusSpan.textContent = 'CONECTADO';\n            statusSpan.classList.remove('text-red-500');\n            statusSpan.classList.add('text-green-500');\n            ipAddress.innerHTML = `IP LOCAL: <span class=\"text-white\">${window?.DtGetLocalIp?.execute() ?? '192.168.1.1'}</span>`;\n            pingStatus.innerHTML = `Ping: <span class=\"text-white\">${window?.DtGetPingResult?.execute() ?? '--'} ms</span>`;\n            if (!pingInterval) {\n                pingInterval = setInterval(() => {\n                    pingStatus.innerHTML = `Ping: <span class=\"text-white\">${window?.DtGetPingResult?.execute() ?? '--'} ms</span>`;\n                }, 5000);\n            }\n        } else {\n            connectButton.classList.add('disconnected');\n            connectButton.classList.remove('connected');\n            statusText.textContent = 'Pressione para conectar';\n            statusSpan.textContent = 'DESCONECTADO';\n            statusSpan.classList.add('text-red-500');\n            statusSpan.classList.remove('text-green-500');\n            ipAddress.innerHTML = `IP LOCAL: <span class=\"text-white\">192.168.1.1</span>`;\n            pingStatus.innerHTML = `Ping: <span class=\"text-white\">-- ms</span>`;\n            if (pingInterval) {\n                clearInterval(pingInterval);\n                pingInterval = null;\n            }\n        }\n    } catch (e) {\n        console.error(\"Erro ao atualizar status da conexão:\", e.message);\n        showCustomAlert(\"Erro ao verificar status da conexão: \" + e.message);\n    }\n}\n\nfunction updateHotspotStatus() {\n    try {\n        const status = window?.DtGetStatusHotSpotService?.execute()?.toUpperCase() ?? 'INACTIVE';\n        console.log(\"Atualizando status do hotspot:\", status);\n        const statusText = status === 'ACTIVE' ? 'Ligado' : 'Desligado';\n        const statusColor = status === 'ACTIVE' ? 'text-success' : 'text-warning';\n        const buttonText = status === 'ACTIVE' ? 'Desligar Roteador' : 'Ligar Roteador';\n\n        hotspotStatusSpan.textContent = statusText;\n        hotspotStatusSpan.className = `font-bold ${statusColor}`;\n        toggleRouterBtn.textContent = buttonText;\n        hotspotErrorEl.classList.add('hidden');\n    } catch (e) {\n        console.error(\"Erro ao verificar status do hotspot:\", e.message);\n        hotspotStatusSpan.textContent = 'Erro';\n        hotspotStatusSpan.className = 'font-bold text-danger';\n        toggleRouterBtn.textContent = 'Ligar Roteador';\n        hotspotErrorEl.classList.remove('hidden');\n        hotspotErrorEl.textContent = `Erro: ${e.message}`;\n    }\n}\n\nfunction toggleHotspot() {\n    try {\n        const currentState = window?.DtGetStatusHotSpotService?.execute()?.toUpperCase() ?? 'INACTIVE';\n        console.log(\"Alternando hotspot, estado atual:\", currentState);\n        hotspotStatusSpan.textContent = 'Atualizando...';\n        hotspotStatusSpan.className = 'font-bold text-warning';\n        hotspotErrorEl.classList.add('hidden');\n\n        if (currentState === 'ACTIVE') {\n            console.log(\"Desligando hotspot...\");\n            window?.DtStopHotSpotService?.execute();\n            showCustomAlert('Hotspot desligado');\n            setTimeout(updateHotspotStatus, 1000);\n        } else {\n            console.log(\"Ligando hotspot...\");\n            window?.DtStartHotSpotService?.execute();\n            showCustomAlert('Hotspot ligado');\n            setTimeout(updateHotspotStatus, 1000);\n        }\n    } catch (e) {\n        console.error(\"Erro ao alternar hotspot:\", e.message);\n        showCustomAlert('Erro ao alternar hotspot: ' + e.message);\n        hotspotStatusSpan.textContent = 'Erro';\n        hotspotStatusSpan.className = 'font-bold text-danger';\n        hotspotErrorEl.classList.remove('hidden');\n        hotspotErrorEl.textContent = `Erro: ${e.message}`;\n    }\n}\n\nfunction updateSelectedServer() {\n    try {\n        const configData = window?.DtGetDefaultConfig?.execute();\n        if (configData) {\n            const config = JSON.parse(configData);\n            console.log(\"Servidor selecionado atualizado:\", config);\n            selectedServerNameEl.textContent = config.name || 'Selecionar Servidor';\n            selectedServerDescEl.textContent = config.description || 'Toque para escolher um servidor';\n            loadCredentials();\n        }\n    } catch (e) {\n        console.error(\"Erro ao atualizar servidor selecionado:\", e);\n        showCustomAlert(\"Erro ao carregar servidor selecionado.\");\n    }\n}\n\nfunction loadServerList(filter = '') {\n    serverListContainer.innerHTML = '';\n    try {\n        const configs = JSON.parse(window?.DtGetConfigs?.execute() ?? '[]');\n        console.log(\"Carregando lista de servidores, filtro:\", filter);\n        const filterLower = filter.toLowerCase().trim();\n        let currentConfig = null;\n        try {\n            const currentData = window?.DtGetDefaultConfig?.execute();\n            if (currentData) currentConfig = JSON.parse(currentData);\n        } catch (e) {\n            console.error(\"Erro ao obter servidor atual:\", e);\n        }\n\n        const groups = new Map();\n        configs.forEach(category => {\n            const groupName = category.name.trim().split(' ')[0].toUpperCase();\n            if (!groups.has(groupName)) groups.set(groupName, []);\n            groups.get(groupName).push(category);\n        });\n\n        let filterHtml = `<div class=\"category-chip active\" data-category=\"ALL\">Todas</div>`;\n        groups.forEach((_, groupName) => {\n            if (groupName.length >= 3) {\n                filterHtml += `<div class=\"category-chip\" data-category=\"${groupName}\">${groupName}</div>`;\n            }\n        });\n        serverListContainer.innerHTML = `<div class=\"category-filter flex overflow-x-auto space-x-2 mb-3\">${filterHtml}</div>`;\n\n        const updateConfigList = (selectedGroup) => {\n            const configBody = document.createElement('div');\n            configBody.className = 'space-y-2';\n            const categoriesToShow = selectedGroup === 'ALL' ? configs : (groups.get(selectedGroup) || []);\n            categoriesToShow.forEach(category => {\n                const filteredItems = category.items.filter(item =>\n                    (item.name?.toLowerCase().includes(filterLower) ||\n                     item.description?.toLowerCase().includes(filterLower))\n                );\n                if (filteredItems.length > 0) {\n                    const categoryDiv = document.createElement('div');\n                    categoryDiv.className = 'my-2';\n                    const categoryHeader = document.createElement('h4');\n                    categoryHeader.className = 'text-base font-bold mb-2 text-gray-400';\n                    categoryHeader.textContent = category.name || 'Servidores';\n                    categoryDiv.appendChild(categoryHeader);\n\n                    filteredItems.forEach(item => {\n                        const itemDiv = document.createElement('div');\n                        itemDiv.className = 'server-modal-item';\n                        if (currentConfig && item.id === currentConfig.id) {\n                            itemDiv.classList.add('selected');\n                        }\n                        itemDiv.innerHTML = `\n                            <div class=\"modal-item-title\">\n                                <img src=\"${item.icon || 'https://placehold.co/24x24/1f2937/e0e7ff?text=S'}\" alt=\"Icone do Servidor\" class=\"w-6 h-6 rounded-full mr-2\">\n                                <div>\n                                    <p class=\"font-semibold text-sm text-white\">${item.name}</p>\n                                    <p class=\"text-xs text-gray-400\">${item.description}</p>\n                                </div>\n                            </div>\n                            <span class=\"text-xs text-gray-400\">${item.mode}</span>\n                        `;\n                        itemDiv.addEventListener('click', () => {\n                            console.log(\"Selecionando servidor:\", item.id);\n                            window?.DtSetConfig?.execute(item.id);\n                            selectedServerNameEl.textContent = item.name;\n                            selectedServerDescEl.textContent = item.description;\n                            serverListContainer.querySelectorAll('.server-modal-item').forEach(el => el.classList.remove('selected'));\n                            itemDiv.classList.add('selected');\n                            closeModal('server-selector-modal');\n                            updateSelectedServer();\n                        });\n                        categoryDiv.appendChild(itemDiv);\n                    });\n                    configBody.appendChild(categoryDiv);\n                }\n            });\n            if (configBody.innerHTML === '') {\n                configBody.innerHTML = '<p class=\"text-center text-gray-400\">Nenhum servidor encontrado.</p>';\n            }\n            serverListContainer.appendChild(configBody);\n        };\n\n        serverListContainer.querySelectorAll('.category-chip').forEach(chip => {\n            chip.addEventListener('click', () => {\n                serverListContainer.querySelector('.category-chip.active').classList.remove('active');\n                chip.classList.add('active');\n                updateConfigList(chip.dataset.category);\n            });\n        });\n\n        updateConfigList('ALL');\n    } catch (e) {\n        console.error(\"Erro ao carregar servidores:\", e);\n        serverListContainer.innerHTML = '<p class=\"text-center text-red-400\">Erro ao carregar servidores.</p>';\n    }\n}\n\nfunction showLogs() {\n    logsContainerEl.innerHTML = '<div class=\"loading-spinner\"></div>';\n    try {\n        const logsJson = window?.DtGetLogs?.execute() ?? '[]';\n        console.log(\"Carregando logs:\", logsJson);\n        const logs = JSON.parse(logsJson);\n        logsContainerEl.innerHTML = '';\n        if (logs.length > 0) {\n            logs.forEach(log => {\n                const logEntry = document.createElement('p');\n                logEntry.className = 'log-entry';\n                logEntry.textContent = JSON.stringify(log).replace(/\\n/g, ' | ');\n                logsContainerEl.appendChild(logEntry);\n            });\n        } else {\n            logsContainerEl.innerHTML = '<p class=\"log-error\">Nenhum log disponível.</p>';\n        }\n    } catch (e) {\n        console.error(\"Erro ao carregar logs:\", e);\n        logsContainerEl.innerHTML = '<p class=\"log-error\">Erro ao carregar logs: ' + e.message + '</p>';\n    }\n}\n\nfunction clearLogs() {\n    try {\n        console.log(\"Limpando logs...\");\n        window?.DtClearLogs?.execute();\n        logsContainerEl.innerHTML = '<p class=\"log-success\">Logs limpos com sucesso.</p>';\n        setTimeout(showLogs, 500);\n    } catch (e) {\n        console.error(\"Erro ao limpar logs:\", e);\n        logsContainerEl.innerHTML = '<p class=\"log-error\">Erro ao limpar logs: ' + e.message + '</p>';\n    }\n}\n\nfunction validateUUID(uuid) {\n    // Validação simplificada de UUID (formato: 8-4-4-4-12 caracteres hexadecimais)\n    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;\n    return uuidRegex.test(uuid);\n}\n\nfunction loadCredentials() {\n    try {\n        const username = window?.DtUsername?.get() || '';\n        const password = window?.DtPassword?.get() || '';\n        const uuid = window?.DtUuid?.get() || '';\n        console.log(\"Carregando credenciais:\", { username, password, uuid });\n        usernameInput.value = username;\n        passwordInput.value = password;\n        uuidInput.value = uuid;\n\n        const currentConfigData = window?.DtGetDefaultConfig?.execute();\n        const currentConfig = currentConfigData ? JSON.parse(currentConfigData) : null;\n        const isV2ray = currentConfig && currentConfig.mode.toLowerCase().startsWith('v2ray');\n        const usernameGroup = document.getElementById('username-group');\n        const passwordGroup = document.getElementById('password-group');\n        const uuidGroup = document.getElementById('uuid-group');\n\n        if (isV2ray) {\n            uuidGroup.style.display = 'block';\n            usernameGroup.style.display = 'none';\n            passwordGroup.style.display = 'none';\n        } else {\n            uuidGroup.style.display = 'none';\n            usernameGroup.style.display = 'block';\n            passwordGroup.style.display = 'block';\n        }\n    } catch (e) {\n        console.error(\"Erro ao carregar credenciais:\", e);\n        showCustomAlert('Erro ao carregar credenciais. Verifique a conexão com o servidor.');\n    }\n}\n\nfunction updateAutoSelection(categoryName) {\n    console.log(\"Atualizando seleção de auto-conexão, categoria:\", categoryName);\n    if (categoryName === 'ALL') {\n        filteredAutoConnectConfigs = allConfigs.flatMap(c => c.items);\n    } else {\n        const foundCategory = allConfigs.find(c => c.name === categoryName);\n        filteredAutoConnectConfigs = foundCategory ? foundCategory.items : [];\n    }\n    if (filteredAutoConnectConfigs.length > 0) {\n        firstConfigNameEl.textContent = filteredAutoConnectConfigs[0].name;\n    } else {\n        firstConfigNameEl.textContent = 'Nenhuma configuração nesta categoria.';\n    }\n}\n\nfunction resetAutoConnectModal() {\n    console.log(\"Resetando modal de auto-conexão\");\n    isAutoConnecting = false;\n    currentAutoIndex = 0;\n    autoConnectStartBtn.textContent = 'Iniciar';\n    autoConnectCancelBtn.textContent = 'Cancelar';\n}\n\nfunction tryAutoConnect() {\n    if (!isAutoConnecting || currentAutoIndex >= filteredAutoConnectConfigs.length) {\n        console.log(\"Auto-conexão finalizada ou interrompida.\");\n        resetAutoConnectModal();\n        updateConnectionStatus();\n        return;\n    }\n    const config = filteredAutoConnectConfigs[currentAutoIndex];\n    console.log(`Tentando conectar ao servidor: ${config.name}`);\n    window?.DtSetConfig?.execute(config.id);\n    selectedServerNameEl.textContent = config.name;\n    selectedServerDescEl.textContent = config.description;\n    window?.DtExecuteVpnStart?.execute();\n}\n\nfunction startAutoConnection() {\n    console.log(\"Iniciando auto-conexão...\");\n    if (filteredAutoConnectConfigs.length === 0) {\n        showCustomAlert('Nenhuma configuração disponível.');\n        return;\n    }\n    const currentConfigData = window?.DtGetDefaultConfig?.execute();\n    const currentConfig = currentConfigData ? JSON.parse(currentConfigData) : null;\n    const isV2ray = currentConfig && currentConfig.mode.toLowerCase().startsWith('v2ray');\n    const user = window?.DtUsername?.get() || '';\n    const pass = window?.DtPassword?.get() || '';\n    const uuid = window?.DtUuid?.get() || '';\n    if (isV2ray && !uuid) {\n        showCustomAlert('Por favor, insira o UUID para conexão V2RAY.');\n        openModal('credentials-modal');\n        return;\n    } else if (!isV2ray && (!user || !pass)) {\n        showCustomAlert('Por favor, insira usuário e senha antes de iniciar a auto-conexão.');\n        openModal('credentials-modal');\n        return;\n    }\n    isAutoConnecting = true;\n    autoConnectStartBtn.textContent = 'Parar';\n    autoConnectCancelBtn.textContent = 'Fechar';\n    tryAutoConnect();\n}\n\nconst userId = window?.DtGetDeviceID?.execute() ?? 'XXXXXXXXXXXX';\nuserIdEl.textContent = userId;\nconst savedLogo = localStorage.getItem('user-logo');\nif (savedLogo) {\n    logoImage.src = savedLogo;\n}\nupdateHotspotStatus();\nloadCredentials();\nupdateSelectedServer();\nupdateConnectionStatus();\n\nmenuBtn.addEventListener('click', () => openModal('menu-modal'));\ncloseMenuBtn.addEventListener('click', () => closeModal('menu-modal'));\nlogsBtn.addEventListener('click', () => {\n    showLogs();\n    openModal('logs-modal');\n});\ncloseLogsModalBtn.addEventListener('click', () => closeModal('logs-modal'));\nclearLogsBtn.addEventListener('click', clearLogs);\nlet pollingInterval = null;\nrouterBtn.addEventListener('click', () => {\n    console.log(\"Abrindo modal do roteador\");\n    openModal('router-modal');\n    updateHotspotStatus();\n    pollingInterval = setInterval(updateHotspotStatus, 3000);\n});\ncloseRouterModalBtn.addEventListener('click', () => {\n    console.log(\"Fechando modal do roteador\");\n    closeModal('router-modal');\n    if (pollingInterval) {\n        clearInterval(pollingInterval);\n        pollingInterval = null;\n    }\n});\ntoggleRouterBtn.addEventListener('click', toggleHotspot);\nserverSelectBtn.addEventListener('click', (e) => {\n    if (e.target.closest('#auto-connect-icon')) {\n        console.log(\"Abrindo modal de auto-conexão\");\n        allConfigs = JSON.parse(window?.DtGetConfigs?.execute() ?? '[]');\n        autoConnectCategoryFilter.innerHTML = '';\n        let filterHtml = `<div class=\"category-chip active\" data-category=\"ALL\">Todas</div>`;\n        allConfigs.forEach(category => {\n            filterHtml += `<div class=\"category-chip\" data-category=\"${category.name}\">${category.name}</div>`;\n        });\n        autoConnectCategoryFilter.innerHTML = filterHtml;\n        autoConnectCategoryFilter.querySelectorAll('.category-chip').forEach(chip => {\n            chip.addEventListener('click', () => {\n                console.log(\"Selecionando categoria:\", chip.dataset.category);\n                autoConnectCategoryFilter.querySelector('.active')?.classList.remove('active');\n                chip.classList.add('active');\n                updateAutoSelection(chip.dataset.category);\n            });\n        });\n        updateAutoSelection('ALL');\n        resetAutoConnectModal();\n        openModal('auto-connect-modal');\n    } else {\n        console.log(\"Abrindo modal de seleção de servidor\");\n        loadServerList();\n        openModal('server-selector-modal');\n    }\n});\ncloseServerModalBtn.addEventListener('click', () => closeModal('server-selector-modal'));\nserverSearchInput.addEventListener('input', (e) => loadServerList(e.target.value));\nloginBtn.addEventListener('click', () => {\n    console.log(\"Abrindo modal de credenciais\");\n    loadCredentials();\n    openModal('credentials-modal');\n});\ncloseCredentialsModalBtn.addEventListener('click', () => closeModal('credentials-modal'));\n\n// Adiciona salvamento em tempo real para os inputs\nusernameInput.addEventListener('input', (e) => {\n    try {\n        window?.DtUsername?.set(e.target.value.trim());\n        console.log(\"Usuário atualizado em tempo real:\", e.target.value);\n    } catch (e) {\n        console.error(\"Erro ao salvar usuário em tempo real:\", e);\n    }\n});\n\npasswordInput.addEventListener('input', (e) => {\n    try {\n        window?.DtPassword?.set(e.target.value.trim());\n        console.log(\"Senha atualizada em tempo real:\", e.target.value);\n    } catch (e) {\n        console.error(\"Erro ao salvar senha em tempo real:\", e);\n    }\n});\n\nuuidInput.addEventListener('input', (e) => {\n    try {\n        window?.DtUuid?.set(e.target.value.trim());\n        console.log(\"UUID atualizado em tempo real:\", e.target.value);\n    } catch (e) {\n        console.error(\"Erro ao salvar UUID em tempo real:\", e);\n    }\n});\n\nsaveCredentialsBtn.addEventListener('click', () => {\n    const username = usernameInput.value.trim();\n    const password = passwordInput.value.trim();\n    const uuid = uuidInput.value.trim();\n    const currentConfigData = window?.DtGetDefaultConfig?.execute();\n    const currentConfig = currentConfigData ? JSON.parse(currentConfigData) : null;\n    const isV2ray = currentConfig && currentConfig.mode.toLowerCase().startsWith('v2ray');\n\n    if (isV2ray) {\n        if (!uuid) {\n            showCustomAlert('Por favor, insira o UUID para conexão V2RAY.');\n            return;\n        }\n        if (!validateUUID(uuid)) {\n            showCustomAlert('UUID inválido. Use o formato: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx');\n            return;\n        }\n    } else {\n        if (!username || !password) {\n            showCustomAlert('Por favor, insira usuário e senha.');\n            return;\n        }\n    }\n\n    try {\n        console.log(\"Salvando credenciais...\");\n        if (isV2ray) {\n            window?.DtUuid?.set(uuid);\n            window?.DtUsername?.set('');\n            window?.DtPassword?.set('');\n        } else {\n            window?.DtUsername?.set(username);\n            window?.DtPassword?.set(password);\n            window?.DtUuid?.set('');\n        }\n\n        // Verificação imediata\n        const savedUsername = window?.DtUsername?.get() || '';\n        const savedPassword = window?.DtPassword?.get() || '';\n        const savedUuid = window?.DtUuid?.get() || '';\n        console.log(\"Credenciais salvas e verificadas:\", { savedUsername, savedPassword, savedUuid });\n\n        if (isV2ray && savedUuid !== uuid) {\n            showCustomAlert('Erro: UUID não salvo corretamente. Tente novamente.');\n            return;\n        } else if (!isV2ray && (savedUsername !== username || savedPassword !== password)) {\n            showCustomAlert('Erro: Credenciais não salvas corretamente. Tente novamente.');\n            return;\n        }\n\n        closeModal('credentials-modal');\n        // Não exibe mensagem de sucesso, conforme solicitado\n    } catch (e) {\n        console.error(\"Erro ao salvar credenciais:\", e);\n        showCustomAlert('Erro ao salvar credenciais: ' + e.message);\n    }\n});\n\ndocument.querySelector('.password-toggle').addEventListener('click', () => {\n    const input = passwordInput;\n    const isPassword = input.type === 'password';\n    input.type = isPassword ? 'text' : 'password';\n    const toggle = document.querySelector('.password-toggle');\n    toggle.classList.toggle('fa-eye', !isPassword);\n    toggle.classList.toggle('fa-eye-slash', isPassword);\n});\n\ncloseAlertBtn.addEventListener('click', () => closeModal('custom-alert'));\n\nclearDataBtn.addEventListener('click', () => {\n    try {\n        console.log(\"Iniciando limpeza de dados...\");\n        clearDataBtn.disabled = true;\n        clearDataBtn.textContent = 'Limpando...';\n        window?.DtUsername?.set('');\n        window?.DtPassword?.set('');\n        window?.DtUuid?.set('');\n        window?.DtCleanDataApp?.execute();\n        console.log(\"Dados da aplicação limpos.\");\n        usernameInput.value = '';\n        passwordInput.value = '';\n        uuidInput.value = '';\n        console.log(\"Campos de credenciais resetados.\");\n        selectedServerNameEl.textContent = 'Selecionar Servidor';\n        selectedServerDescEl.textContent = 'Toque para escolher um servidor';\n        console.log(\"Servidor selecionado resetado.\");\n        showCustomAlert('Dados limpos com sucesso.');\n        updateConnectionStatus();\n        updateHotspotStatus();\n        console.log(\"Status de conexão e hotspot atualizados.\");\n        setTimeout(() => {\n            clearDataBtn.disabled = false;\n            clearDataBtn.textContent = 'Limpar Dados';\n            console.log(\"Limpeza de dados concluída, botão restaurado.\");\n        }, 1000);\n    } catch (e) {\n        console.error(\"Erro ao limpar dados:\", e);\n        showCustomAlert('Erro ao limpar dados: ' + e.message);\n        clearDataBtn.disabled = false;\n        clearDataBtn.textContent = 'Limpar Dados';\n        console.log(\"Botão restaurado após erro.\");\n    }\n});\n\ntoggleBgBtn.addEventListener('click', () => {\n    console.log(\"Alternando fundo...\");\n    if (body.style.backgroundImage.includes('url')) {\n        body.style.backgroundImage = 'none';\n        body.style.backgroundColor = getComputedStyle(body).getPropertyValue('--solid-background-color');\n    } else {\n        body.style.backgroundImage = 'linear-gradient(to bottom, rgba(13, 15, 26, 0.95), rgba(13, 15, 26, 0.95)), var(--background-image-url)';\n        body.style.backgroundColor = '';\n    }\n});\n\nchangeColorBtn.addEventListener('click', () => openModal('color-modal'));\ncloseColorBtn.addEventListener('click', () => closeModal('color-modal'));\ncolorPicker.addEventListener('input', (e) => {\n    console.log(\"Alterando cor do fundo:\", e.target.value);\n    body.style.setProperty('--solid-background-color', e.target.value);\n});\n\nlogoPlaceholderBtn.addEventListener('click', () => logoUpload.click());\nlogoUpload.addEventListener('change', (e) => {\n    const file = e.target.files[0];\n    if (file) {\n        console.log(\"Carregando nova logo...\");\n        const reader = new FileReader();\n        reader.onload = (ev) => {\n            logoImage.src = ev.target.result;\n            localStorage.setItem('user-logo', ev.target.result);\n        };\n        reader.readAsDataURL(file);\n    }\n});\n\nconnectButton.addEventListener('click', () => {\n    try {\n        console.log(\"Clicado no botão de conexão\");\n        const currentState = window?.DtGetVpnState?.execute()?.toUpperCase() ?? 'DISCONNECTED';\n        console.log(\"Estado atual da VPN:\", currentState);\n\n        if (currentState === 'CONNECTED' || currentState === 'CONNECTING') {\n            console.log(\"Desconectando VPN...\");\n            window?.DtExecuteVpnStop?.execute();\n            setTimeout(updateConnectionStatus, 1000);\n        } else if (currentState === 'DISCONNECTED' || currentState === 'AUTH_FAILED') {\n            if (selectedServerNameEl.textContent === 'Selecionar Servidor') {\n                showCustomAlert('Selecione um servidor primeiro.');\n                return;\n            }\n\n            const currentConfigData = window?.DtGetDefaultConfig?.execute();\n            const currentConfig = currentConfigData ? JSON.parse(currentConfigData) : null;\n            const isV2ray = currentConfig && currentConfig.mode.toLowerCase().startsWith('v2ray');\n            const username = window?.DtUsername?.get() || '';\n            const password = window?.DtPassword?.get() || '';\n            const uuid = window?.DtUuid?.get() || '';\n\n            console.log(\"Tentando conectar com credenciais:\", { username, password, uuid });\n\n            if (isV2ray && !uuid) {\n                showCustomAlert('Por favor, insira o UUID para conexão V2RAY.');\n                openModal('credentials-modal');\n                return;\n            } else if (!isV2ray && (!username || !password)) {\n                showCustomAlert('Por favor, insira usuário e senha.');\n                openModal('credentials-modal');\n                return;\n            }\n\n            console.log(\"Conectando VPN...\");\n            window?.DtExecuteVpnStart?.execute();\n            setTimeout(updateConnectionStatus, 1000);\n        } else {\n            console.log(\"Estado desconhecido, atualizando status...\");\n            updateConnectionStatus();\n        }\n    } catch (e) {\n        console.error(\"Erro ao alternar estado da VPN:\", e);\n        showCustomAlert('Erro ao conectar/desconectar VPN: ' + e.message);\n    }\n});\n\nbuyLoginBtn.addEventListener('click', () => {\n    console.log(\"Abrindo URL para comprar login\");\n    window?.DtOpenExternalUrl?.execute('https://example.com/comprar-login');\n});\n\nautoConnectStartBtn.addEventListener('click', () => {\n    console.log(\"Clicado no botão de iniciar/parar auto-conexão\");\n    if (isAutoConnecting) {\n        isAutoConnecting = false;\n        window?.DtExecuteVpnStop?.execute();\n        resetAutoConnectModal();\n        updateConnectionStatus();\n    } else {\n        startAutoConnection();\n    }\n});\n\nautoConnectCancelBtn.addEventListener('click', () => {\n    console.log(\"Clicado no botão de cancelar/fechar auto-conexão\");\n    if (isAutoConnecting) {\n        isAutoConnecting = false;\n        window?.DtExecuteVpnStop?.execute();\n        resetAutoConnectModal();\n        updateConnectionStatus();\n    } else {\n        closeModal('auto-connect-modal');\n    }\n});\n\ncloseAutoConnectModalBtn.addEventListener('click', () => {\n    console.log(\"Fechando modal de auto-conexão\");\n    closeModal('auto-connect-modal');\n});\n\nconsole.log(\"Inicializando aplicação...\");\nupdateConnectionStatus();\nupdateSelectedServer();\nloadServerList();\n</script>\n</body>\n</html>",
        "type": "HTML"
    },
    {
        "label": "ANDROID WEBVIEW (POR SUA CONTA E RISCO)",
        "name": "APP_SUPPORT_BUTTON",
        "value": null,
        "type": "HTML"
    },
    {
        "label": "PAGINA WEBVIEW (POR SUA CONTA E RISCO)",
        "name": "APP_WEB_VIEW",
        "value": null,
        "type": "HTML"
    }
]